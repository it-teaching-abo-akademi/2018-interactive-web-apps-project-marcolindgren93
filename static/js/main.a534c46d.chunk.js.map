{"version":3,"sources":["components/Button.js","components/Popup.js","components/LoadingSpinner.js","components/PopupGraph.js","components/CheckBox.js","components/StockTable.js","components/Stock.js","components/Portfolio.js","components/PopupInput.js","components/App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","_templateObject","props","tiny","disabled","color","Button","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onClick","label","React","Component","PopupBackground","div","Popup_templateObject","PopupWindow","_templateObject2","Popup","children","SpinAnimation","keyframes","LoadingSpinner_templateObject","LoadingSpinner","LoadingSpinner_templateObject2","size","PopupGraph","Popup_Popup","name","Button_Button","onClose","CheckBoxButton","CheckBox_templateObject","checked","CheckBox","TableWrapper","StockTable_templateObject","StyledTable","table","StockTable_templateObject2","StyledTableRow","tr","_templateObject3","StyledTableHeading","th","_templateObject4","StyledTableBody","tbody","_templateObject5","StyledTableData","td","_templateObject6","StockTable","react","QuantityInput","input","Stock_templateObject","Stock","_this","call","state","inputNum","quantity","valueError","valueIsLoaded","fetchData","bind","assertThisInitialized","setState","prevProps","resetState","_this2","exchange","currency","exchangeRate","Math","round","message","type","min","onChange","event","handleInput","style","textAlign","CheckBox_CheckBox","selected","onSelect","index","target","onUpdateQuantity","_this3","fetch","then","response","json","result","onUpdateValue","error","PortfolioBox","Portfolio_templateObject","HeaderWrapper","Portfolio_templateObject2","ExchangeWrapper","Portfolio_templateObject3","ButtonWrapper","Portfolio_templateObject4","Portfolio","isGraphOpen","isInputOpen","stocks","portfolio","selectedStocks","toggleGraphPopup","toggleInputPopup","newStock","updateStockQuantity","updateStockValue","toggleSelect","removeStocks","setEUR","setUSD","parseInt","onDelete","exchangeIsLoaded","exchangeError","StockTable_StockTable","keys","map","Stock_Stock","symbol","includes","length","PopupGraph_PopupGraph","PopupInput_PopupInput","labelText","submitText","maxLength","onSubmit","newStocks","concat","toUpperCase","onUpdateStocks","newQuantity","newValue","i","indexOf","splice","push","console","log","lastIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stockNum","err","return","PopupInputWrapper","PopupInput_templateObject","StyledInput","PopupInput_templateObject2","PopupInput","inputStr","focus","ref","handleSubmit","AppWrapper","App_templateObject","PortfolioWrapper","App_templateObject2","App","isPopupOpen","portfolios","JSON","parse","localStorage","getItem","newPortfolio","removePortfolio","togglePopup","updateStocks","Portfolio_Portfolio","parseFloat","newPortfolios","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a534c46d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  padding: ${props => props.tiny ? \"2px\" : \"8px\"};\r\n  text-transform: uppercase;\r\n  font-size: ${props => props.tiny ? \"10px\" : \"15px\"};\r\n  border: none;\r\n  border-radius: 15px;\r\n  background-color: ${props => props.disabled ? 'gainsboro' : (props.color || 'dodgerblue')};\r\n  color: white;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  cursor: ${props => props.disabled ? 'default' : 'pointer'};\r\n`;\r\n\r\nexport class Button extends React.Component {\r\n    render() {\r\n        return (\r\n            <StyledButton tiny={this.props.tiny} disabled={this.props.disabled} color={this.props.color} onClick={this.props.disabled ? () => undefined : this.props.onClick}>{this.props.label}</StyledButton>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PopupBackground = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  margin: 0;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  z-index: 100;\r\n`;\r\n\r\nconst PopupWindow = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  padding: 10px;\r\n  background-color: white;\r\n  border-radius: 15px;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  z-index: 101;\r\n`;\r\n\r\nexport class Popup extends React.Component {\r\n    render() {\r\n        return (\r\n            <PopupBackground>\r\n                <PopupWindow>\r\n                    {this.props.children}\r\n                </PopupWindow>\r\n            </PopupBackground>\r\n        );\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst SpinAnimation = keyframes`\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const LoadingSpinner = styled.div`\r\n  display: inline-block;\r\n  width: ${props => props.size ? props.size : \"15px\"};\r\n  height: ${props => props.size ? props.size : \"15px\"};\r\n  border: 4px solid rgba(0, 0, 0, 0.4);\r\n  border-radius: 100%;\r\n  border-bottom-color: black;\r\n  animation: ${SpinAnimation} 1s ease-in-out infinite;\r\n`;","import React from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport { Popup } from \"./Popup\";\r\n\r\nexport class PopupGraph extends React.Component {\r\n    render() {\r\n        return (\r\n            <Popup>\r\n                {this.props.name} <Button label=\"Close\" onClick={this.props.onClose}/>\r\n            </Popup>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CheckBoxButton = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: ${props => props.checked ? '' : 'inset'} 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  background-color: ${props => props.checked ? 'orange' : 'transparent'};\r\n`;\r\n\r\nexport class CheckBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <CheckBoxButton checked={this.props.checked} onClick={this.props.onClick} />\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TableWrapper = styled.div`\r\n  width: 100%;\r\n  height: 200px;\r\n  padding: 5px;\r\n  overflow-y: auto;\r\n  border-radius: 15px;\r\n  box-shadow: inset 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  position: relative;\r\n  table-layout: fixed;\r\n`;\r\n\r\nconst StyledTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nexport const StyledTableRow = styled.tr`\r\n  height: 30px;\r\n  position: relative;\r\n  font-size: 10px;\r\n  display: table-row;\r\n  \r\n  :hover {\r\n    background-color: aliceblue;\r\n  }\r\n  \r\n  :only-child {\r\n    :hover {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledTableHeading = styled.th`\r\n  text-align: left;\r\n  border: 1px solid black;\r\n  border-top: 0;\r\n  \r\n  :first-child {\r\n    border-left: 0;\r\n  }\r\n  \r\n  :last-child {\r\n    border-right: 0;\r\n  }\r\n`;\r\n\r\nconst StyledTableBody = styled.tbody`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nexport const StyledTableData = styled.td`\r\n  text-align: left;\r\n  border: 1px solid black;\r\n  border-top: 0;\r\n  border-bottom: 0;\r\n  min-width: 56px;\r\n  overflow: auto;\r\n  word-wrap: break-word;\r\n  \r\n  :first-child {\r\n    border-left: 0;\r\n  }\r\n  \r\n  :last-child {\r\n    border-right: 0;\r\n  }\r\n`;\r\n\r\nexport class StockTable extends React.Component {\r\n    render() {\r\n        // TODO: Replace table with divs, min-width: 56, flex: 1, overflow: hidden\r\n        return (\r\n            <TableWrapper>\r\n                <StyledTable>\r\n                    <thead>\r\n                        <StyledTableRow>\r\n                           <StyledTableHeading>Name</StyledTableHeading>\r\n                           <StyledTableHeading>Unit value</StyledTableHeading>\r\n                           <StyledTableHeading>Quantity</StyledTableHeading>\r\n                           <StyledTableHeading>Total value</StyledTableHeading>\r\n                           <StyledTableHeading>Select</StyledTableHeading>\r\n                        </StyledTableRow>\r\n                    </thead>\r\n                    <StyledTableBody>\r\n                        {this.props.children}\r\n                    </StyledTableBody>\r\n                </StyledTable>\r\n            </TableWrapper>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { CheckBox } from \"./CheckBox\";\r\nimport { LoadingSpinner } from \"./LoadingSpinner\";\r\nimport { StyledTableData, StyledTableRow } from \"./StockTable\";\r\n\r\n\r\nconst QuantityInput = styled.input`\r\n  width: 56px;\r\n  font-size: 10px;\r\n  height: 20px;\r\n`;\r\n\r\nexport class Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputNum: this.props.quantity,\r\n            valueError: null,\r\n            valueIsLoaded: false,\r\n        };\r\n\r\n        this.fetchData = this.fetchData.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.value === 0) {\r\n            this.fetchData();\r\n        }\r\n        else {\r\n            this.setState({valueIsLoaded: true});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.quantity !== this.props.quantity) {\r\n            this.resetState();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let exchange = 1;\r\n        if (this.props.currency === \"EUR\" && !!this.props.exchangeRate) {\r\n            exchange = this.props.exchangeRate;\r\n        }\r\n        return (\r\n            <StyledTableRow>\r\n                <StyledTableData>{this.props.name}</StyledTableData>\r\n                <StyledTableData>\r\n                    {!this.state.valueIsLoaded ? <LoadingSpinner size=\"10px\"/> :\r\n                        <span>{this.props.currency === \"USD\" && \"$\"}{Math.round(this.props.value*exchange*100)/100}{this.props.currency === \"EUR\" && \"€\"}</span>\r\n                    }&nbsp;\r\n                    <Button label=\"&#8635;\" color=\"springgreen\" onClick={this.fetchData} tiny={true} />&nbsp;\r\n                    {!!this.state.valueError && this.state.valueError.message}\r\n                </StyledTableData>\r\n                <StyledTableData>\r\n                    <QuantityInput type=\"number\" value={this.state.inputNum} min={0} onChange={event => this.handleInput(event)} />\r\n                </StyledTableData>\r\n                <StyledTableData>\r\n                    {!this.state.valueIsLoaded ? <LoadingSpinner size=\"10px\"/> :\r\n                        <span>{this.props.currency === \"USD\" && \"$\"}{Math.round(this.props.value*this.state.inputNum*exchange*100)/100}{this.props.currency === \"EUR\" && \"€\"}</span>\r\n                    }\r\n                </StyledTableData>\r\n                <StyledTableData style={{textAlign: 'center'}}>\r\n                    <CheckBox checked={this.props.selected} onClick={() => this.props.onSelect(this.props.index)} />\r\n                </StyledTableData>\r\n            </StyledTableRow>\r\n        );\r\n    }\r\n\r\n    handleInput(event) {\r\n        this.setState({inputNum: event.target.value});\r\n        this.props.onUpdateQuantity(this.props.index, event.target.value)\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({inputNum: this.props.quantity});\r\n    }\r\n\r\n    fetchData() {\r\n        this.setState({valueError: null, valueIsLoaded: false})\r\n        fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\" + this.props.name + \"&apikey=\" + process.env.REACT_APP_ALPHA_VANTAGE_API_KEY)\r\n            .then(response => response.json())\r\n            .then(\r\n                result => {\r\n                    if (\"Error Message\" in result) {\r\n                        this.setState({valueIsLoaded: true, valueError: {message: \"Invalid symbol\"}});\r\n                    } else if (\"Note\" in result) {\r\n                        this.setState({valueIsLoaded: true, valueError: {message: \"API call limit reached\"}});\r\n                    } else {\r\n                        this.setState({valueIsLoaded: true});\r\n                        this.props.onUpdateValue(this.props.index, result[\"Global Quote\"][\"05. price\"]);\r\n                    }\r\n                },\r\n                error => {\r\n                    this.setState({valueIsLoaded: true, valueError: error});\r\n                }\r\n            );\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { LoadingSpinner } from \"./LoadingSpinner\";\r\nimport { PopupGraph } from \"./PopupGraph\";\r\nimport { PopupInput } from \"./PopupInput\";\r\nimport { Stock } from \"./Stock\";\r\nimport { StockTable } from \"./StockTable\";\r\n\r\nconst PortfolioBox = styled.div`\r\n  border-radius: 15px;\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n`;\r\n\r\nconst HeaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const ExchangeWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 280px;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport class Portfolio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isGraphOpen: false,\r\n            isInputOpen: false,\r\n            stocks: this.props.portfolio.stocks,\r\n            selectedStocks: [],\r\n            currency: \"USD\",\r\n        };\r\n\r\n        this.toggleGraphPopup = this.toggleGraphPopup.bind(this);\r\n        this.toggleInputPopup = this.toggleInputPopup.bind(this);\r\n        this.newStock = this.newStock.bind(this);\r\n        this.updateStockQuantity = this.updateStockQuantity.bind(this);\r\n        this.updateStockValue = this.updateStockValue.bind(this);\r\n        this.toggleSelect = this.toggleSelect.bind(this);\r\n        this.removeStocks = this.removeStocks.bind(this);\r\n        this.setEUR = this.setEUR.bind(this);\r\n        this.setUSD = this.setUSD.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.portfolio !== this.props.portfolio) {\r\n            this.resetState();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const name = this.props.portfolio.name || \"Portfolio \"+(parseInt(this.props.index)+1);\r\n        return (\r\n            <PortfolioBox>\r\n                <HeaderWrapper>\r\n                    {name}\r\n                    <Button label=\"&nbsp;X&nbsp;\" color=\"crimson\" onClick={() => this.props.onDelete(this.props.index)} />\r\n                </HeaderWrapper>\r\n                <ExchangeWrapper>\r\n                    <Button label=\"Show in €\" onClick={this.setEUR} disabled={this.state.currency === \"EUR\" || !this.props.exchangeIsLoaded || !!this.props.exchangeError} />\r\n                    {!this.props.exchangeIsLoaded && <LoadingSpinner size=\"33px\" />}\r\n                    {!!this.props.exchangeError && this.props.exchangeError.message}\r\n                    <Button label=\"Show in $\" onClick={this.setUSD} disabled={this.state.currency === \"USD\" || !this.props.exchangeIsLoaded || !!this.props.exchangeError} />\r\n                </ExchangeWrapper>\r\n                <StockTable>\r\n                    {Object.keys(this.state.stocks).map(key => (\r\n                        <Stock\r\n                            key={key}\r\n                            index={key}\r\n                            name={this.state.stocks[key].symbol}\r\n                            value={this.state.stocks[key].value}\r\n                            quantity={this.state.stocks[key].quantity}\r\n                            currency={this.state.currency}\r\n                            exchangeRate={this.props.exchangeRate}\r\n                            selected={this.state.selectedStocks.includes(key)}\r\n                            onSelect={this.toggleSelect}\r\n                            onUpdateQuantity={this.updateStockQuantity}\r\n                            onUpdateValue={this.updateStockValue}\r\n                        />\r\n                    ))}\r\n                </StockTable>\r\n                <ButtonWrapper>\r\n                    <Button label=\"Add Stock\" onClick={this.toggleInputPopup} disabled={this.state.stocks.length >= 50} />\r\n                    <Button label=\"Remove selected\" onClick={this.removeStocks} disabled={this.state.selectedStocks.length === 0} />\r\n                </ButtonWrapper>\r\n\r\n                {this.state.isGraphOpen &&\r\n                <PopupGraph\r\n                    name={name}\r\n                    onClose={this.toggleGraphPopup}\r\n                />}\r\n                {this.state.isInputOpen &&\r\n                <PopupInput\r\n                    labelText=\"Enter the symbol for your stock:\"\r\n                    submitText=\"Add Stock\"\r\n                    maxLength=\"5\"\r\n                    onSubmit={this.newStock}\r\n                    onClose={this.toggleInputPopup}\r\n                />}\r\n            </PortfolioBox>\r\n        );\r\n    }\r\n\r\n    toggleGraphPopup() {\r\n        this.setState({isGraphOpen: !this.state.isGraphOpen})\r\n    }\r\n\r\n    toggleInputPopup() {\r\n        this.setState({isInputOpen: !this.state.isInputOpen})\r\n    }\r\n\r\n    newStock(symbol) {\r\n        if (this.state.stocks.length < 50 && symbol) {\r\n            const newStocks = this.state.stocks.concat([{symbol: symbol.toUpperCase(), quantity: 1, value: 0}]);\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    updateStockQuantity(index, newQuantity) {\r\n        if (parseInt(index) >= 0) {\r\n            const newStocks = this.state.stocks;\r\n            newStocks[index].quantity = newQuantity;\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    updateStockValue(index, newValue) {\r\n        if (parseInt(index) >= 0) {\r\n            const newStocks = this.state.stocks;\r\n            newStocks[index].value = newValue;\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    toggleSelect(index) {\r\n        if (parseInt(index) >= 0) {\r\n            const stocks = this.state.selectedStocks;\r\n            const i = stocks.indexOf(index);\r\n            if (i > -1) {\r\n                stocks.splice(i, 1);\r\n            } else {\r\n                stocks.push(index);\r\n            }\r\n            this.setState({selectedStocks: stocks});\r\n        }\r\n    }\r\n\r\n    removeStocks() {\r\n        const selected = this.state.selectedStocks;\r\n        const newStocks = this.state.stocks;\r\n        console.log(newStocks);\r\n        let i = 0;\r\n        let lastIndex = 50;\r\n        for (const stockNum of selected) {\r\n            const index = parseInt(stockNum);\r\n            console.log(lastIndex >= index ? index : index-i);\r\n            newStocks.splice(lastIndex >= index ? index : index-i, 1);\r\n            i++;\r\n            lastIndex = index;\r\n        }\r\n        console.log(newStocks);\r\n        this.setState({stocks: newStocks, selectedStocks: []});\r\n        this.props.onUpdateStocks(this.props.index, newStocks);\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({stocks: this.props.portfolio.stocks, selectedStocks: [],});\r\n    }\r\n\r\n    setEUR() {\r\n        this.setState({currency: \"EUR\"});\r\n    }\r\n\r\n    setUSD() {\r\n        this.setState({currency: \"USD\"})\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { Popup } from \"./Popup\";\r\nimport { ButtonWrapper } from \"./Portfolio\";\r\n\r\nconst PopupInputWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  height: 150px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  font-size: 15px;\r\n  height: 30px;\r\n  width: 300px;\r\n`;\r\n\r\nexport class PopupInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputStr: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Popup>\r\n                <PopupInputWrapper>\r\n                    {this.props.labelText}\r\n                    <StyledInput type=\"text\" ref={(input) => this.input = input} value={this.state.inputStr} maxLength={this.props.maxLength} onChange={event => this.handleInput(event)} />\r\n                    <ButtonWrapper>\r\n                        <Button label={this.props.submitText || \"Submit\"} onClick={() => this.handleSubmit()} disabled={!this.state.inputStr} />\r\n                        <Button label=\"Cancel\" color=\"crimson\" onClick={this.props.onClose} />\r\n                    </ButtonWrapper>\r\n                </PopupInputWrapper>\r\n            </Popup>\r\n        );\r\n    }\r\n\r\n    handleInput(event) {\r\n        this.setState({inputStr: event.target.value});\r\n    }\r\n\r\n    handleSubmit() {\r\n        this.props.onSubmit(this.state.inputStr);\r\n        this.props.onClose();\r\n    }\r\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"./Button\";\nimport { PopupInput } from \"./PopupInput\";\nimport { Portfolio } from \"./Portfolio\";\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n`;\n\nconst PortfolioWrapper = styled.div`\n  width: 100%;\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n`;\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isPopupOpen: false,\n      portfolios: JSON.parse(localStorage.getItem(\"portfolios\")) || [],\n      exchangeError: null,\n      exchangeIsLoaded: false,\n      exchangeRate: -1,\n    };\n\n    this.newPortfolio = this.newPortfolio.bind(this);\n    this.removePortfolio = this.removePortfolio.bind(this);\n    this.togglePopup = this.togglePopup.bind(this);\n    this.updateStocks = this.updateStocks.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=\"+process.env.REACT_APP_ALPHA_VANTAGE_API_KEY)\n      .then(response => response.json())\n      .then(\n        result => {\n          if (\"Error Message\" in result) {\n            this.setState({exchangeIsLoaded: true, exchangeError: {message: \"Invalid symbol\"}});\n          } else if (\"Note\" in result) {\n              this.setState({exchangeIsLoaded: true, exchangeError: {message: \"API limit reached\"}});\n          } else {\n            this.setState({exchangeIsLoaded: true, exchangeRate: result[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]});\n          }\n        },\n        error => {\n          this.setState({exchangeIsLoaded: true, exchangeError: error});\n        }\n      );\n  }\n\n  render() {\n    return (\n      <AppWrapper>\n        <Button label=\"Add new portfolio\" onClick={() => this.togglePopup()} disabled={this.state.portfolios.length >= 10} />\n        <PortfolioWrapper>\n          {Object.keys(this.state.portfolios).map(key => (\n            <Portfolio\n              key={key}\n              index={key}\n              portfolio={this.state.portfolios[key]}\n              onDelete={this.removePortfolio}\n              onUpdateStocks={this.updateStocks}\n              exchangeError={this.state.exchangeError}\n              exchangeIsLoaded={this.state.exchangeIsLoaded}\n              exchangeRate={parseFloat(this.state.exchangeRate)}\n            />\n          ))}\n        </PortfolioWrapper>\n\n        {this.state.isPopupOpen &&\n        <PopupInput\n          labelText=\"Enter a name for your portfolio:\"\n          submitText=\"Add Portfolio\"\n          maxLength=\"16\"\n          onSubmit={this.newPortfolio}\n          onClose={this.togglePopup}\n        />}\n      </AppWrapper>\n    );\n  }\n\n  togglePopup() {\n    this.setState({isPopupOpen: !this.state.isPopupOpen})\n  }\n\n  newPortfolio(name) {\n    if (this.state.portfolios.length < 10) {\n      const newPortfolios = this.state.portfolios.concat([{name: name || \"\", currency: \"EUR\", stocks: []}]);\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n\n  removePortfolio(index) {\n    if (parseInt(index) >= 0) {\n      let newPortfolios = this.state.portfolios;\n      newPortfolios.splice(index, 1);\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n\n  updateStocks(index, newStocks) {\n    if (parseInt(index) >= 0) {\n      const newPortfolios = this.state.portfolios;\n      newPortfolios[index].stocks = newStocks;\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}