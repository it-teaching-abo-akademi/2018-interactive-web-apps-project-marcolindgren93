{"version":3,"sources":["components/Button.js","components/Popup.js","components/LoadingSpinner.js","components/PopupGraph.js","components/CheckBox.js","components/StockTable.js","components/Stock.js","components/Portfolio.js","components/PopupInput.js","components/App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","_templateObject","props","tiny","disabled","color","Button","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onClick","label","React","Component","PopupBackground","div","Popup_templateObject","PopupWindow","_templateObject2","Popup","children","SpinAnimation","keyframes","LoadingSpinner_templateObject","LoadingSpinner","LoadingSpinner_templateObject2","size","HeadingWrapper","PopupGraph_templateObject","ContentWrapper","PopupGraph_templateObject2","DateWrapper","_templateObject3","DatePickerPair","_templateObject4","Colors","PopupGraph","_this","call","state","startDate","moment","add","endDate","historyData","historyNumLoaded","chartData","handleStartDate","bind","assertThisInitialized","handleEndDate","fetchHistory","prevProps","prevState","_this2","data","concat","filter","item","date","startOf","sort","b","setState","_this3","Popup_Popup","name","Button_Button","onClose","length","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","YAxis","unit","Legend","Tooltip","keys","stocks","map","Line","symbol","stroke","dot","es","selected","toDate","onChange","dateFormat","dropdownMode","toast","warn","_this4","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","stock","fetch","then","response","json","result","error","newHistoryData","_iterator","Symbol","iterator","next","done","err","return","CheckBoxButton","CheckBox_templateObject","checked","CheckBox","TableWrapper","StockTable_templateObject","StyledTable","table","StockTable_templateObject2","StyledTableRow","tr","StockTable_templateObject3","StyledTableHeading","th","StockTable_templateObject4","StyledTableBody","tbody","_templateObject5","StyledTableData","td","_templateObject6","StockTable","react","QuantityInput","input","Stock_templateObject","Stock","inputNum","quantity","valueIsLoaded","fetchData","resetState","exchange","currency","exchangeRate","Math","round","type","min","event","handleInput","style","textAlign","CheckBox_CheckBox","onSelect","index","target","onUpdateQuantity","onUpdateValue","PortfolioBox","Portfolio_templateObject","HeaderWrapper","Portfolio_templateObject2","ExchangeWrapper","Portfolio_templateObject3","ButtonWrapper","Portfolio_templateObject4","Portfolio","isGraphOpen","isInputOpen","portfolio","selectedStocks","toggleGraphPopup","toggleInputPopup","newStock","updateStockQuantity","updateStockValue","toggleSelect","removeStocks","setEUR","setUSD","parseInt","onDelete","exchangeIsLoaded","onReloadExchange","StockTable_StockTable","Stock_Stock","includes","calculateTotalValue","PopupGraph_PopupGraph","indexOf","toString","PopupInput_PopupInput","labelText","submitText","maxLength","onSubmit","newStocks","toUpperCase","onUpdateStocks","newQuantity","newValue","i","splice","push","lastIndex","stockNum","totalValue","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","PopupInputWrapper","PopupInput_templateObject","StyledInput","PopupInput_templateObject2","PopupInput","inputStr","focus","ref","handleSubmit","AppWrapper","App_templateObject","PortfolioWrapper","App_templateObject2","App","isPopupOpen","portfolios","JSON","parse","localStorage","getItem","newPortfolio","removePortfolio","togglePopup","updateStocks","fetchExchange","lib","position","Portfolio_Portfolio","parseFloat","newPortfolios","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecd6950f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/* Styled components can also take in props to alter their appearance dynamically. */\r\nconst StyledButton = styled.button`\r\n  padding: ${props => props.tiny ? \"2px\" : \"8px\"};\r\n  text-transform: uppercase;\r\n  font-size: ${props => props.tiny ? \"10px\" : \"15px\"};\r\n  border: none;\r\n  border-radius: 15px;\r\n  background-color: ${props => props.disabled ? 'gainsboro' : (props.color || 'dodgerblue')};\r\n  color: white;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  cursor: ${props => props.disabled ? 'default' : 'pointer'};\r\n`;\r\n\r\n/* A generic button component */\r\n/*  Props:\r\n *  label - The button label\r\n *  tiny - If this is true, the button is smaller\r\n *  color - The color of the button. If it isn't set, the button is dodgerblue\r\n *  disabled - If this is true, the button is grayed out and does not execute onClick\r\n *  onClick - Takes a function that the button should execute once clicked\r\n */\r\nexport class Button extends React.Component {\r\n    render() {\r\n        return (\r\n            <StyledButton tiny={this.props.tiny} disabled={this.props.disabled} color={this.props.color} onClick={this.props.disabled ? () => undefined : this.props.onClick}>{this.props.label}</StyledButton>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PopupBackground = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  margin: 0;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  z-index: 100;\r\n`;\r\n\r\nconst PopupWindow = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  padding: 10px;\r\n  background-color: white;\r\n  border-radius: 15px;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  z-index: 101;\r\n`;\r\n\r\n/* A generic popup wrapper component */\r\n/* Makes sure the popup is drawn on top of everything else with a darkened background. Used in all popup windows. */\r\nexport class Popup extends React.Component {\r\n    render() {\r\n        return (\r\n            <PopupBackground>\r\n                <PopupWindow>\r\n                    {this.props.children}\r\n                </PopupWindow>\r\n            </PopupBackground>\r\n        );\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\n\r\n/* Keyframes for the loading spinner */\r\nconst SpinAnimation = keyframes`\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\n/* A loading spinner component */\r\n/*  Props:\r\n *  size - Sets the size of the loading spinner. If nothing is specified, it is 15px x 15px\r\n */\r\nexport const LoadingSpinner = styled.div`\r\n  display: inline-block;\r\n  width: ${props => props.size ? props.size : \"15px\"};\r\n  height: ${props => props.size ? props.size : \"15px\"};\r\n  border: 4px solid rgba(0, 0, 0, 0.4);\r\n  border-radius: 100%;\r\n  border-bottom-color: black;\r\n  animation: ${SpinAnimation} 1s ease-in-out infinite;\r\n`;","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { LoadingSpinner } from \"./LoadingSpinner\";\r\nimport { Popup } from \"./Popup\";\r\n\r\nconst HeadingWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 10px 0;\r\n  height: 300px;\r\n`;\r\n\r\nconst DateWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst DatePickerPair = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst Colors = [\r\n    \"deepskyblue\",\r\n    \"deeppink\",\r\n    \"mediumseagreen\",\r\n];\r\n\r\n/* The popup with the performance graph */\r\n/*  Props:\r\n *  name - The name of the portfolio\r\n *  stocks - An array of the selected stocks that should be shown in the graph\r\n *  onClose - The action of the \"Close\" button\r\n */\r\nexport class PopupGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            startDate: moment().add(-7, \"days\"), // The start date of the graph. I used the external library \"moment\" here because handling it is more elegant than the built-in Date object. Arbitrarily picked to be a week before today.\r\n            endDate: moment(), // The end date for the graph. moment() returns the current date and time (today).\r\n            historyData: [], // The history data array is empty before it has loaded from the API\r\n            historyNumLoaded: 0, // The number of completed fetches, successful or not\r\n            chartData: [], // The fetched data formatted in a way that the chart can read it easily\r\n        };\r\n\r\n        this.handleStartDate = this.handleStartDate.bind(this);\r\n        this.handleEndDate = this.handleEndDate.bind(this);\r\n        this.fetchHistory = this.fetchHistory.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchHistory();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Reformat the chart data when more charts have been loaded or when the start and end dates have changed.\r\n        // The chart library prefers a specific data structure, so the API data is converted\r\n        if (prevState.historyNumLoaded !== this.state.historyNumLoaded || prevState.startDate !== this.state.startDate || prevState.endDate !== this.state.endDate) {\r\n            let data = [];\r\n            for (const key in this.state.historyData) {\r\n                data = data.concat([this.state.historyData[key]]);\r\n            }\r\n            data = data\r\n                .filter(item => moment(item.date) >= this.state.startDate.startOf(\"day\") && moment(item.date) <= this.state.endDate.startOf(\"day\"))\r\n                .sort((a, b) => moment(a.date) - moment(b.date)); // Filter out any dates outside the given range and sort the results with the latest date last\r\n            this.setState({chartData: data});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // I used the external library \"Recharts\" to draw the graph. It prefers its data in a certain format which is why I convert it.\r\n        return (\r\n            <Popup>\r\n                <HeadingWrapper>\r\n                Performance: {this.props.name} <Button label=\"Close\" onClick={this.props.onClose} color=\"crimson\" />\r\n                </HeadingWrapper>\r\n                <ContentWrapper>\r\n                    {this.state.chartData.length !== 0 ?\r\n                        <ResponsiveContainer width=\"100%\" height={300}>\r\n                            <LineChart data={this.state.chartData}>\r\n                                <XAxis dataKey=\"date\"/>\r\n                                <YAxis unit=\"$\"/>\r\n                                <Legend />\r\n                                <Tooltip unit=\"$\" />\r\n                                {Object.keys(this.props.stocks).map(key => (\r\n                                    <Line\r\n                                        key={key}\r\n                                        dataKey={`${this.props.stocks[key].symbol}`}\r\n                                        stroke={Colors[key]}\r\n                                        dot={false}\r\n                                    />\r\n                                ))}\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                        :\r\n                        (this.state.historyNumLoaded !== this.props.stocks.length ?\r\n                            <LoadingSpinner size=\"100px\"/>\r\n                            :\r\n                            <Button label=\"&nbsp;&#8635;&nbsp;Refresh\" onClick={() => this.fetchHistory()} color=\"springgreen\" />\r\n                        )\r\n                    }\r\n                </ContentWrapper>\r\n\r\n                <DateWrapper>\r\n                    <DatePickerPair>\r\n                        Start date: {/* I used the external library \"react-datepicker\" to make the date pickers */}\r\n                        <DatePicker\r\n                            selected={this.state.startDate.toDate()}\r\n                            onChange={this.handleStartDate}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            dropdownMode=\"scroll\"\r\n                        />\r\n                    </DatePickerPair>\r\n                    <DatePickerPair>\r\n                        End date:\r\n                        <DatePicker\r\n                            selected={this.state.endDate.toDate()}\r\n                            onChange={this.handleEndDate}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            dropdownMode=\"scroll\"\r\n                        />\r\n                    </DatePickerPair>\r\n                </DateWrapper>\r\n            </Popup>\r\n        );\r\n    }\r\n\r\n    // This sets the start date to the picked start date as long as it's earlier than the end date\r\n    handleStartDate(date) {\r\n        if (this.state.endDate > moment(date)) {\r\n            this.setState({startDate: moment(date)});\r\n        } else {\r\n            toast.warn(\"Start date must be earlier than the end date!\"); // Fire a warning toast (react-toastify)\r\n        }\r\n    }\r\n\r\n    // Sets the end date as long as it's later than the start date and not a future date\r\n    handleEndDate(date) {\r\n        if (moment(date) > moment()) {\r\n            toast.warn(\"End date can not be a future date!\")\r\n        } else if (moment(date) <= this.state.startDate) {\r\n            toast.warn(\"End date must be later than the start date!\")\r\n        } else {\r\n            this.setState({endDate: moment(date)});\r\n        }\r\n    }\r\n\r\n    // Fetches the weekly stock values for each of the given stocks' symbols using the Alpha Vantage API. Called when the PopupGraph mounts.\r\n    fetchHistory() {\r\n        this.setState({historyNumLoaded: 0});\r\n        for (const stock of this.props.stocks) {\r\n            fetch(\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+stock.symbol+\"&outputsize=full&apikey=\"+process.env.REACT_APP_ALPHA_VANTAGE_API_KEY)\r\n                .then(response => response.json())\r\n                .then(\r\n                    result => {\r\n                        if (\"Error Message\" in result) { // This key only appears in the result JSON when an invalid symbol is given\r\n                            this.setState({historyNumLoaded: this.state.historyNumLoaded+1});\r\n                            toast.error(\"Invalid symbol!\"); // Fire an error toast (uses the external library react-toastify)\r\n                        } else if (\"Note\" in result) { // This key only appears in the result JSON when the API limit has been reached. The limit is five requests per minute and 500 per day.\r\n                            this.setState({historyNumLoaded: this.state.historyNumLoaded+1});\r\n                            toast.error(\"API limit reached. Please wait a minute and try again.\");\r\n                        } else {\r\n                            const newHistoryData = this.state.historyData;\r\n                            for (const date in result[\"Time Series (Daily)\"]) {\r\n                                if (!newHistoryData[date]) newHistoryData[date] = {date};\r\n                                newHistoryData[date][stock.symbol] = result[\"Time Series (Daily)\"][date][\"4. close\"];\r\n                            }\r\n                            this.setState({historyNumLoaded: this.state.historyNumLoaded+1, historyData: newHistoryData}); // Add the relevant received data to the historyData state variable.\r\n                        }\r\n                    },\r\n                    error => {\r\n                        this.setState({historyNumLoaded: this.state.historyNumLoaded+1});\r\n                        toast.error(error);\r\n                    }\r\n                );\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CheckBoxButton = styled.button`\r\n  width: 20px;\r\n  height: 20px;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: ${props => props.checked ? '' : 'inset'} 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  background-color: ${props => props.checked ? 'orange' : 'transparent'};\r\n`;\r\n\r\n/* A generic checkbox component. Its state is handled in its parent. */\r\n/*  Props:\r\n *  checked - If this is true the checkbox is checked, otherwise it's unchecked\r\n *  onClick - Takes a function that the checkbox should execute once clicked. Preferably something that changes the checked state in the parent\r\n */\r\nexport class CheckBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <CheckBoxButton checked={this.props.checked} onClick={this.props.onClick} />\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TableWrapper = styled.div`\r\n  width: 100%;\r\n  height: 200px;\r\n  padding: 5px;\r\n  overflow-y: auto;\r\n  border-radius: 15px;\r\n  box-shadow: inset 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  position: relative;\r\n  table-layout: fixed;\r\n  background-color: white;\r\n`;\r\n\r\nconst StyledTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nexport const StyledTableRow = styled.tr`\r\n  height: 30px;\r\n  position: relative;\r\n  font-size: 10px;\r\n  display: table-row;\r\n  \r\n  :hover {\r\n    background-color: aliceblue;\r\n  }\r\n  \r\n  :only-child {\r\n    :hover {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledTableHeading = styled.th`\r\n  text-align: left;\r\n  border: 1px solid black;\r\n  border-top: 0;\r\n  \r\n  :first-child {\r\n    border-left: 0;\r\n  }\r\n  \r\n  :last-child {\r\n    border-right: 0;\r\n  }\r\n`;\r\n\r\nconst StyledTableBody = styled.tbody`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nexport const StyledTableData = styled.td`\r\n  text-align: left;\r\n  border: 1px solid black;\r\n  border-top: 0;\r\n  border-bottom: 0;\r\n  min-width: 56px;\r\n  overflow: auto;\r\n  word-wrap: break-word;\r\n  \r\n  :first-child {\r\n    border-left: 0;\r\n  }\r\n  \r\n  :last-child {\r\n    border-right: 0;\r\n  }\r\n`;\r\n\r\n/* A Stock table wrapper component */\r\n/* Includes the table heading */\r\nexport class StockTable extends React.Component {\r\n    render() {\r\n        return (\r\n            <TableWrapper>\r\n                <StyledTable>\r\n                    <thead>\r\n                        <StyledTableRow>\r\n                           <StyledTableHeading>Name</StyledTableHeading>\r\n                           <StyledTableHeading>Unit value</StyledTableHeading>\r\n                           <StyledTableHeading>Quantity</StyledTableHeading>\r\n                           <StyledTableHeading>Total value</StyledTableHeading>\r\n                           <StyledTableHeading>Select</StyledTableHeading>\r\n                        </StyledTableRow>\r\n                    </thead>\r\n                    <StyledTableBody>\r\n                        {this.props.children}\r\n                    </StyledTableBody>\r\n                </StyledTable>\r\n            </TableWrapper>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { CheckBox } from \"./CheckBox\";\r\nimport { LoadingSpinner } from \"./LoadingSpinner\";\r\nimport { StyledTableData, StyledTableRow } from \"./StockTable\";\r\n\r\n\r\nconst QuantityInput = styled.input`\r\n  width: 56px;\r\n  font-size: 10px;\r\n  height: 20px;\r\n`;\r\n\r\n/* A component for displaying the stock data in a table */\r\n/*  Props:\r\n *  index - The current index of a stock in a Portfolio\r\n *  name - The symbol of the stock\r\n *  value - The value of the stock from the object data\r\n *  quantity - The number of shares in the stock\r\n *  currency - The currency of the Portfolio\r\n *  exchangeRate - The exchange rate from App\r\n *  selected - Whether the stock has been selected or not\r\n *  onSelect - What happens when the stock has been selected\r\n *  onUpdateQuantity - What happens in Portfolio when the share quantity is updated\r\n *  onUpdateValue - What happens in Portfolio when the value of the stock is updated\r\n */\r\nexport class Stock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputNum: this.props.quantity, // The quantity input number\r\n            valueIsLoaded: false, // True if the API fetch is completed, false while it isn't\r\n        };\r\n\r\n        this.fetchData = this.fetchData.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.value === 0) {\r\n            this.fetchData(); // Only fetch the data if it hasn't been fetched.\r\n        }\r\n        else {\r\n            this.setState({valueIsLoaded: true});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.quantity !== this.props.quantity) {\r\n            this.resetState(); // Reset state if the stock quantity doesn't match (When a Portfolio is removed)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let exchange = 1;\r\n        if (this.props.currency === \"EUR\" && !!this.props.exchangeRate) {\r\n            exchange = this.props.exchangeRate; // If the exchange rate exists and is set to EUR, use that\r\n        }\r\n        return (\r\n            <StyledTableRow>\r\n                <StyledTableData>{this.props.name}</StyledTableData>\r\n                <StyledTableData>\r\n                    {!this.state.valueIsLoaded ? <LoadingSpinner size=\"10px\"/> :\r\n                        <span>{this.props.currency === \"USD\" && \"$\"}{Math.round(this.props.value*exchange*100)/100}{this.props.currency === \"EUR\" && \"€\"}</span>\r\n                    }&nbsp;\r\n                    <Button label=\"&nbsp;&#8635;&nbsp;\" color=\"springgreen\" onClick={() => this.fetchData()} tiny={true} />\r\n                </StyledTableData>\r\n                <StyledTableData>\r\n                    <QuantityInput type=\"number\" value={this.state.inputNum} min={0} onChange={event => this.handleInput(event)} />\r\n                </StyledTableData>\r\n                <StyledTableData>\r\n                    {!this.state.valueIsLoaded ? <LoadingSpinner size=\"10px\"/> :\r\n                        <span>{this.props.currency === \"USD\" && \"$\"}{Math.round(this.props.value*this.state.inputNum*exchange*100)/100}{this.props.currency === \"EUR\" && \"€\"}</span>\r\n                    }\r\n                </StyledTableData>\r\n                <StyledTableData style={{textAlign: 'center'}}>\r\n                    <CheckBox checked={this.props.selected} onClick={() => this.props.onSelect(this.props.index)} />\r\n                </StyledTableData>\r\n            </StyledTableRow>\r\n        );\r\n    }\r\n\r\n    // Called when the quantity input is updated\r\n    handleInput(event) {\r\n        this.setState({inputNum: event.target.value});\r\n        this.props.onUpdateQuantity(this.props.index, event.target.value)\r\n    }\r\n\r\n    // Resets the quantity from the props\r\n    resetState() {\r\n        this.setState({inputNum: this.props.quantity});\r\n    }\r\n\r\n    // Fetches the current value of the stock using the Alpha Vantage API. Called when the Stock mounts (if necessary) or when the refresh button is pressed\r\n    fetchData() {\r\n        this.setState({valueIsLoaded: false});\r\n        fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\" + this.props.name + \"&apikey=\" + process.env.REACT_APP_ALPHA_VANTAGE_API_KEY)\r\n            .then(response => response.json())\r\n            .then(\r\n                result => {\r\n                    if (!result[\"Global Quote\"]) { // This key doesn't appear in the result JSON when an invalid symbol is given\r\n                        this.setState({valueIsLoaded: true});\r\n                        toast.error(\"Invalid symbol!\"); // Fire an error toast (uses the external library react-toastify)\r\n                    } else if (\"Note\" in result) { // This key only appears in the result JSON when the API limit has been reached. The limit is five requests per minute and 500 per day.\r\n                        this.setState({valueIsLoaded: true});\r\n                        toast.error(\"API call limit reached. Please wait a minute and try again.\");\r\n                    } else {\r\n                        this.setState({valueIsLoaded: true});\r\n                        this.props.onUpdateValue(this.props.index, result[\"Global Quote\"][\"05. price\"]);\r\n                    }\r\n                },\r\n                error => {\r\n                    this.setState({valueIsLoaded: true});\r\n                    toast.error(error);\r\n                }\r\n            );\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { LoadingSpinner } from \"./LoadingSpinner\";\r\nimport { PopupGraph } from \"./PopupGraph\";\r\nimport { PopupInput } from \"./PopupInput\";\r\nimport { Stock } from \"./Stock\";\r\nimport { StockTable } from \"./StockTable\";\r\n\r\nconst PortfolioBox = styled.div`\r\n  border-radius: 15px;\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.4);\r\n  background-color: aliceblue;\r\n`;\r\n\r\nconst HeaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const ExchangeWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 280px;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n`;\r\n\r\n/* The portfolio component */\r\n/*  Props:\r\n *  index - The current array index in App's portfolio array\r\n *  portfolio - The portfolio object that this component handles\r\n *  onDelete - What happens when the portfolio is deleted\r\n *  onUpdateStocks - The function that executes when stocks are updated\r\n *  onReloadExchange - The function that reloads the exchange rates in App\r\n *  exchangeIsLoaded - True if exchange rates are loaded, false if not\r\n *  exchangeRate - The loaded exchange rate\r\n */\r\nexport class Portfolio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isGraphOpen: false, // If set to true, the performance graph popup is open, otherwise it isn't\r\n            isInputOpen: false, // If set to true, the stock symbol input popup is open, otherwise not\r\n            stocks: this.props.portfolio.stocks, // The array of stock objects in the portfolio\r\n            selectedStocks: [], // Array of currently selected stocks' indices\r\n            currency: \"USD\", // The selected currency. Defaults to USD as the API values are loaded in USD\r\n        };\r\n\r\n        this.toggleGraphPopup = this.toggleGraphPopup.bind(this);\r\n        this.toggleInputPopup = this.toggleInputPopup.bind(this);\r\n        this.newStock = this.newStock.bind(this);\r\n        this.updateStockQuantity = this.updateStockQuantity.bind(this);\r\n        this.updateStockValue = this.updateStockValue.bind(this);\r\n        this.toggleSelect = this.toggleSelect.bind(this);\r\n        this.removeStocks = this.removeStocks.bind(this);\r\n        this.setEUR = this.setEUR.bind(this);\r\n        this.setUSD = this.setUSD.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.portfolio !== this.props.portfolio) {\r\n            this.resetState(); // If the portfolio object given by App changes, reset the state to display the correct stocks\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const name = this.props.portfolio.name || \"Portfolio \"+(parseInt(this.props.index)+1);\r\n        return (\r\n            <PortfolioBox>\r\n                <HeaderWrapper>\r\n                    {name}\r\n                    <Button label=\"&nbsp;X&nbsp;\" color=\"crimson\" onClick={() => this.props.onDelete(this.props.index)} />\r\n                </HeaderWrapper>\r\n                <ExchangeWrapper>\r\n                    <Button label=\"Show in €\" onClick={this.setEUR} disabled={this.props.exchangeRate === -1} />\r\n                    {!this.props.exchangeIsLoaded && <LoadingSpinner size=\"33px\" />}\r\n                    {this.props.exchangeIsLoaded && this.props.exchangeRate === -1 && <Button label=\"&nbsp;&#8635;&nbsp;\" onClick={this.props.onReloadExchange} color=\"springgreen\" />}\r\n                    <Button label=\"Show in $\" onClick={this.setUSD} disabled={this.props.exchangeRate === -1} />\r\n                </ExchangeWrapper>\r\n                <StockTable>\r\n                    {Object.keys(this.state.stocks).map(key => (\r\n                        <Stock\r\n                            key={key}\r\n                            index={key}\r\n                            name={this.state.stocks[key].symbol}\r\n                            value={this.state.stocks[key].value}\r\n                            quantity={this.state.stocks[key].quantity}\r\n                            currency={this.state.currency}\r\n                            exchangeRate={this.props.exchangeRate}\r\n                            selected={this.state.selectedStocks.includes(key)}\r\n                            onSelect={this.toggleSelect}\r\n                            onUpdateQuantity={this.updateStockQuantity}\r\n                            onUpdateValue={this.updateStockValue}\r\n                        />\r\n                    ))}\r\n                </StockTable>\r\n                <ButtonWrapper>\r\n                    Total value of {this.props.portfolio.name}: {this.state.currency === \"USD\" && \"$\"}{this.calculateTotalValue()}{this.state.currency === \"EUR\" && \"€\"}\r\n                </ButtonWrapper>\r\n                <ButtonWrapper>\r\n                    <Button label=\"Add Stock\" onClick={this.toggleInputPopup} disabled={this.state.stocks.length >= 50} />\r\n                    {/* Because of the Alpha Vantage API limitations, the performance graph has been set to only be openable when 1-3 stocks are selected. If the API didn't have limits this wouldn't be necessary */}\r\n                    <Button label=\"Performance graph\" onClick={this.toggleGraphPopup} disabled={this.state.selectedStocks.length < 1 || this.state.selectedStocks.length > 3} />\r\n                    <Button label=\"Remove selected\" onClick={this.removeStocks} disabled={this.state.selectedStocks.length === 0} />\r\n                </ButtonWrapper>\r\n\r\n                {this.state.isGraphOpen &&\r\n                <PopupGraph\r\n                    name={name}\r\n                    onClose={this.toggleGraphPopup}\r\n                    stocks={this.state.stocks.filter(stock => this.state.selectedStocks.includes(this.state.stocks.indexOf(stock).toString()))}\r\n                />}\r\n                {this.state.isInputOpen &&\r\n                <PopupInput\r\n                    labelText=\"Enter the symbol for your stock:\"\r\n                    submitText=\"Add Stock\"\r\n                    maxLength=\"5\"\r\n                    onSubmit={this.newStock}\r\n                    onClose={this.toggleInputPopup}\r\n                />}\r\n            </PortfolioBox>\r\n        );\r\n    }\r\n\r\n    // Toggles the performance graph popup state\r\n    toggleGraphPopup() {\r\n        this.setState({isGraphOpen: !this.state.isGraphOpen})\r\n    }\r\n\r\n    // Toggles the stock symbol input popup state\r\n    toggleInputPopup() {\r\n        this.setState({isInputOpen: !this.state.isInputOpen})\r\n    }\r\n\r\n    // Adds a stock to the portfolio and updates the stock in App to save it\r\n    newStock(symbol) {\r\n        if (this.state.stocks.length < 50 && symbol) {\r\n            const newStocks = this.state.stocks.concat([{symbol: symbol.toUpperCase(), quantity: 1, value: 0}]);\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    // Updates the number of stocks in the portfolio object in App\r\n    updateStockQuantity(index, newQuantity) {\r\n        if (parseInt(index) >= 0) {\r\n            const newStocks = this.state.stocks;\r\n            newStocks[index].quantity = newQuantity;\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    // Updates the value of a Stock\r\n    updateStockValue(index, newValue) {\r\n        if (parseInt(index) >= 0) {\r\n            const newStocks = this.state.stocks;\r\n            newStocks[index].value = newValue;\r\n            this.setState({stocks: newStocks});\r\n            this.props.onUpdateStocks(this.props.index, newStocks);\r\n        }\r\n    }\r\n\r\n    // Toggles a selected Stock in the selected stock index array\r\n    toggleSelect(index) {\r\n        if (parseInt(index) >= 0) {\r\n            const stocks = this.state.selectedStocks;\r\n            const i = stocks.indexOf(index);\r\n            if (i > -1) {\r\n                stocks.splice(i, 1);\r\n            } else {\r\n                stocks.push(index);\r\n            }\r\n            this.setState({selectedStocks: stocks});\r\n        }\r\n    }\r\n\r\n    // Removes all selected stocks. Indices are corrected after every removal since they will change.\r\n    removeStocks() {\r\n        const selected = this.state.selectedStocks;\r\n        const newStocks = this.state.stocks;\r\n        let i = 0;\r\n        let lastIndex = 50;\r\n        for (const stockNum of selected) {\r\n            const index = parseInt(stockNum);\r\n            newStocks.splice(lastIndex >= index ? index : index-i, 1);\r\n            i++;\r\n            lastIndex = index;\r\n        }\r\n        this.setState({stocks: newStocks, selectedStocks: []});\r\n        this.props.onUpdateStocks(this.props.index, newStocks);\r\n    }\r\n\r\n    // Reset the stock state\r\n    resetState() {\r\n        this.setState({stocks: this.props.portfolio.stocks, selectedStocks: [],});\r\n    }\r\n\r\n    // Set the currently displayed currency to euros\r\n    setEUR() {\r\n        this.setState({currency: \"EUR\"});\r\n    }\r\n\r\n    // Set the currently displayed currency to US dollars\r\n    setUSD() {\r\n        this.setState({currency: \"USD\"})\r\n    }\r\n\r\n    // Calculates the total value of the stocks in the portfolio\r\n    calculateTotalValue() {\r\n        let exchange = 1;\r\n        if (this.state.currency === \"EUR\" && !!this.props.exchangeRate) {\r\n            exchange = this.props.exchangeRate;\r\n        }\r\n\r\n        let totalValue = 0;\r\n        for (const stock of this.state.stocks) {\r\n            totalValue += stock.value*stock.quantity*exchange;\r\n        }\r\n        return Math.round(totalValue*100)/100;\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./Button\";\r\nimport { Popup } from \"./Popup\";\r\nimport { ButtonWrapper } from \"./Portfolio\";\r\n\r\nconst PopupInputWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  height: 150px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  font-size: 15px;\r\n  height: 30px;\r\n  width: 300px;\r\n`;\r\n\r\n/* A generic text input popup */\r\n/*  Props:\r\n *  labelText - The heading text of the popup\r\n *  submitText - The text on the Submit button. If not set, it says \"Submit\"\r\n *  maxLength - optional maximum length for the input string\r\n *  onSubmit - The action to be taken when the submit button is pressed. Preferably something that handles the input string\r\n *  onClose - What should happen when the close button is pressed. Preferably something that closes the popup\r\n */\r\nexport class PopupInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputStr: \"\", // Contains the inputted string\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.input.focus(); // Set the focus on the input field when the component mounts\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Popup>\r\n                <PopupInputWrapper>\r\n                    {this.props.labelText}\r\n                    <StyledInput type=\"text\" ref={(input) => this.input = input} value={this.state.inputStr} maxLength={this.props.maxLength} onChange={event => this.handleInput(event)} />\r\n                    <ButtonWrapper>\r\n                        <Button label={this.props.submitText || \"Submit\"} onClick={() => this.handleSubmit()} disabled={!this.state.inputStr} />\r\n                        <Button label=\"Cancel\" color=\"crimson\" onClick={this.props.onClose} />\r\n                    </ButtonWrapper>\r\n                </PopupInputWrapper>\r\n            </Popup>\r\n        );\r\n    }\r\n\r\n    // Sets the inputStr state variable to the text in the input box\r\n    handleInput(event) {\r\n        this.setState({inputStr: event.target.value});\r\n    }\r\n\r\n    // Executes the onSubmit prop function followed by the onClose function\r\n    handleSubmit() {\r\n        this.props.onSubmit(this.state.inputStr);\r\n        this.props.onClose();\r\n    }\r\n}","import React from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport styled from \"styled-components\";\nimport { Button } from \"./Button\";\nimport { PopupInput } from \"./PopupInput\";\nimport { Portfolio } from \"./Portfolio\";\n\n/* These two constants are styled components */\n/* They use the library \"styled-components\" to insert CSS into individual component pieces. */\n/* This means we don't need to assign classes or clunky, monolithic CSS files. We can use these similarly to React components instead. */\nconst AppWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n`;\n\nconst PortfolioWrapper = styled.div`\n  width: 100%;\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n`;\n\n/* This is the main App component of the site. It takes care of the local storage and lays down the basic groundwork. */\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isPopupOpen: false, // Keeps track of the \"Add new portfolio\" popup.\n      portfolios: JSON.parse(localStorage.getItem(\"portfolios\")) || [], // These are all the portfolios of the program. If none are found in the local storage at startup, we have an empty array instead.\n      exchangeIsLoaded: false, // False while the api is being called, true when it's not\n      exchangeRate: -1, // If this value is negative, the exchange rate api call hasn't returned anything (yet or at all)\n    };\n\n    this.newPortfolio = this.newPortfolio.bind(this);\n    this.removePortfolio = this.removePortfolio.bind(this);\n    this.togglePopup = this.togglePopup.bind(this);\n    this.updateStocks = this.updateStocks.bind(this);\n    this.fetchExchange = this.fetchExchange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchExchange();\n  }\n\n  render() {\n    // Details of each component and their props are in their respective files.\n    return (\n      <AppWrapper>\n        <ToastContainer position=\"top-center\" /> {/* This component is needed for toasts made with react-toastify */}\n        <Button label=\"Add new portfolio\" onClick={() => this.togglePopup()} disabled={this.state.portfolios.length >= 10} />\n        <PortfolioWrapper>\n          {Object.keys(this.state.portfolios).map(key => (\n            <Portfolio\n              key={key}\n              index={key}\n              portfolio={this.state.portfolios[key]}\n              onDelete={this.removePortfolio}\n              onUpdateStocks={this.updateStocks}\n              onReloadExchange={this.fetchExchange}\n              exchangeIsLoaded={this.state.exchangeIsLoaded}\n              exchangeRate={parseFloat(this.state.exchangeRate)}\n            />\n          ))}\n        </PortfolioWrapper>\n\n        {this.state.isPopupOpen &&\n        <PopupInput\n          labelText=\"Enter a name for your portfolio:\"\n          submitText=\"Add Portfolio\"\n          maxLength=\"16\"\n          onSubmit={this.newPortfolio}\n          onClose={this.togglePopup}\n        />}\n      </AppWrapper>\n    );\n  }\n\n  // Toggles the isPopupOpen state variable between true and false.\n  togglePopup() {\n    this.setState({isPopupOpen: !this.state.isPopupOpen})\n  }\n\n  // Adds a new portfolio with a specified name to the portfolios.\n  newPortfolio(name) {\n    if (this.state.portfolios.length < 10) {\n      const newPortfolios = this.state.portfolios.concat([{name: name || \"\", stocks: []}]);\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n\n  // Removes the portfolio with the given index from the portfolio array. Passed to and called from the Portfolio components\n  removePortfolio(index) {\n    if (parseInt(index) >= 0) {\n      let newPortfolios = this.state.portfolios;\n      newPortfolios.splice(index, 1);\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n\n  // Update the stocks of a portfolio. Passed to and called from the Portfolio components\n  updateStocks(index, newStocks) {\n    if (parseInt(index) >= 0) {\n      const newPortfolios = this.state.portfolios;\n      newPortfolios[index].stocks = newStocks;\n      this.setState({portfolios: newPortfolios});\n      localStorage.setItem(\"portfolios\", JSON.stringify(newPortfolios));\n    }\n  }\n\n  // Fetches the current USD->EUR exchange rate using the Alpha Vantage API. Called when the App mounts or from a Portfolio if the API fetch failed.\n  fetchExchange() {\n      this.setState({exchangeIsLoaded: false});\n      fetch(\"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=\"+process.env.REACT_APP_ALPHA_VANTAGE_API_KEY)\n          .then(response => response.json()) // Get the API response JSON\n          .then(\n              result => {\n                  if (\"Error Message\" in result) { // This key only appears in the result JSON when an invalid symbol is given\n                      this.setState({exchangeIsLoaded: true});\n                      toast.error(\"Invalid symbol!\"); // Fire an error toast (uses the external library react-toastify)\n                  } else if (\"Note\" in result) { // This key only appears in the result JSON when the API limit has been reached. The limit is five requests per minute and 500 per day.\n                      this.setState({exchangeIsLoaded: true});\n                      toast.error(\"API limit reached. Please wait a minute and try again.\");\n                  } else {\n                      this.setState({exchangeIsLoaded: true, exchangeRate: result[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]}); // Set the exchange rate to the one from AV\n                  }\n              },\n              error => {\n                  this.setState({exchangeIsLoaded: true});\n                  toast.error(error);\n              }\n          );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}